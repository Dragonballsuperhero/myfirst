{"ast":null,"code":"export default {\n  name: 'Users',\n  data() {\n    // 自定义校验规则\n    var checkEmail = (rule, value, cb) => {\n      // 验证邮箱\n      var regemail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\n      if (regemail.test(value)) {\n        return cb();\n      }\n      cb(new Error('格式有误'));\n    };\n    var checkMobile = (rule, value, cb) => {\n      // 验证手机号\n      const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\n      if (regMobile.test(value)) {\n        return cb();\n      }\n      ;\n      cb(new Error('格式有误'));\n    };\n    return {\n      total: 0,\n      // 总人数\n      dialogVisible: false,\n      //添加用户对话框是否显示\n      editDialogVisible: false,\n      //修改用户对话框是否显示\n      queryInfo: {\n        //获取用户列表的请求参数\n        query: '',\n        pagenum: 1,\n        pagesize: 5\n      },\n      userList: [],\n      // 用户列表\n      addUserForm: {\n        //需要添加的用户字段\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      editForm: {\n        //编辑用户\n        id: '',\n        email: '',\n        mobile: ''\n      },\n      userRules: {\n        //添加表单的验证规则\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在 3 到 10 个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 15,\n          message: '长度在 5 到 15 个字符',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        mobile: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'blur'\n        }, {\n          validator: checkMobile,\n          trigger: 'blur'\n        }]\n      },\n      editFormRules: {\n        //编辑用户表单验证规则\n        email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        mobile: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'blur'\n        }, {\n          validator: checkMobile,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.getUserList();\n  },\n  methods: {\n    async getUserList() {\n      // 请求用户列表\n      const {\n        data: res\n      } = await this.$http.get('users', {\n        params: this.queryInfo\n      });\n      this.total = res.data.total;\n      this.userList = res.data.users;\n      // console.log(res);\n    },\n\n    // 监听 pagesize 的变化\n    handleSizeChange(newSize) {\n      // 将最新的newSize的值赋给pagesize，然后重新发起请求\n      this.queryInfo.pagesize = newSize;\n      this.getUserList();\n    },\n    // 监听页数的变化\n    handleCurrentChange(newPage) {\n      // 将最新的newPage的值赋给pagenum，然后重新发起请求\n      this.queryInfo.pagenum = newPage;\n      this.getUserList();\n    },\n    // 封装一个每次请求成功后，给出用户相对应的提示信息\n    notification(result, fail, success, status) {\n      if (result.meta.status !== status) {\n        return this.$message.error(fail);\n      } else {\n        this.$message.success(success);\n      }\n    },\n    // 监听状态按钮最新的状态\n    async getnewStatus(userlist) {\n      // 当用户的状态发生改变时，发起请求用户的状态\n      const {\n        data: res\n      } = await this.$http.put(`users/${userlist.id}/state/${userlist.mg_state}`);\n      this.notification(res, '用户状态更新失败', '用户状态更新成功', 200);\n    },\n    // 当对话框关闭后清空表单的所有数据\n    closeDialog() {\n      this.$refs.formRef.resetFields();\n    },\n    // 添加用户\n    addUser() {\n      this.$refs.formRef.validate(async vail => {\n        if (!vail) return;\n        const {\n          data: res\n        } = await this.$http.post('users', this.addUserForm);\n        this.notification(res, '用户创建失败', '用户创建成功', 201);\n        // 关闭对话框\n        this.dialogVisible = false;\n        //更新页面的数据\n        this.getUserList();\n      });\n    },\n    //编辑用户信息\n    async editUserInfo(id) {\n      //显示对话框\n      this.editDialogVisible = true;\n      // 根据id获取到相对应的用户信息\n      const {\n        data: res\n      } = await this.$http.get('users/' + id);\n      this.editForm = res.data;\n    },\n    // 监听编辑对话框\n    closeEditDialog() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 提交编辑的结果\n    editComplate() {\n      // 预验证表单\n      this.$refs.editFormRef.validate(async vali => {\n        if (!vali) return;\n        const {\n          data: res\n        } = await this.$http.put('users/' + this.editForm.id, {\n          email: this.editForm.email,\n          mobile: this.editForm.mobile\n        });\n        if (res.meta.status !== 200) {\n          return this.message.error('修改用户信息失败');\n        } else {\n          this.$message.success('修改用户信息成功');\n          // 关闭对话框\n          this.editDialogVisible = false;\n          // 更新页面的数据\n          this.getUserList();\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAmHA;EACAA;EACAC;IACA;IACA;MACA;MACA;MACA;QACA;MACA;MACAC;IACA;IACA;MACA;MACA;MACA;QACA;MACA;MAAA;MACAA;IACA;IACA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;QAAA;QACAC;QACAC;QACAC;MACA;MACAC;MAAA;MACAC;QAAA;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QAAA;QACAC;QACAH;QACAC;MACA;MACAG;QAAA;QACAN,WACA;UAAAO;UAAAC;UAAAC;QAAA,GACA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,EACA;QACAR,WACA;UAAAM;UAAAC;UAAAC;QAAA,GACA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,EACA;QACAP,QACA;UAAAK;UAAAC;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA,EACA;QACAN,SACA;UAAAI;UAAAC;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA;MAEA;MACAI;QAAA;QACAX,QACA;UAAAK;UAAAC;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA,EACA;QACAN,SACA;UAAAI;UAAAC;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA;MAEA;IACA;EACA;EACAK;IACA;EACA;EACAC;IACA;MACA;MACA;QAAA1B;MAAA;QAAA2B;MAAA;MACA;MACA;MACA;IACA;;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;QAAA9B;MAAA;MACA;IACA;IACA;IACA+B;MACA;IACA;IACA;IACAC;MACA;QACA;QACA;UAAAhC;QAAA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;QAAAA;MAAA;MACA;IACA;IACA;IACAiC;MACA;IACA;IACA;IACAC;MACA;MACA;QACA;QACA;UAAAlC;QAAA,sDACA;UAAAa;UAAAC;QAAA;QAEA;UACA;QACA;UAAA;UACA;UACA;UACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","cb","total","dialogVisible","editDialogVisible","queryInfo","query","pagenum","pagesize","userList","addUserForm","username","password","email","mobile","editForm","id","userRules","required","message","trigger","min","max","validator","editFormRules","created","methods","params","handleSizeChange","handleCurrentChange","notification","closeDialog","addUser","closeEditDialog","editComplate"],"sourceRoot":"src/views/rightSidebar","sources":["Users.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 用户导航区域 -->\r\n    <el-breadcrumb separator=\"/\">\r\n    <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n    <el-breadcrumb-item :to=\"{ path: '/users' }\">用户管理</el-breadcrumb-item>\r\n    <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n</el-breadcrumb>\r\n<!-- 卡片区域 -->\r\n    <el-card>\r\n      <el-row :gutter=\"20\">\r\n          <el-col :span=\"8\">\r\n            <!-- 搜索框 -->\r\n            <el-input v-model=\"queryInfo.query\" placeholder=\"请输入内容\" clearable @clear=\"getUserList\">\r\n              <!-- 搜索按钮 -->\r\n              <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getUserList\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n        <!-- 添加用户按钮 -->\r\n          <el-col :span=\"6\"><el-button type=\"primary\" @click=\"dialogVisible = true\">添加用户</el-button></el-col>\r\n      </el-row>\r\n      <!-- 用户列表 -->\r\n      <el-table :data=\"userList\" style=\"width: 100%\" stripe border>\r\n      <el-table-column type=index label=\"#\" width=\"180\"></el-table-column>\r\n      <el-table-column prop=\"username\" label=\"姓名\" width=\"180\"></el-table-column>\r\n      <el-table-column prop=\"email\" label=\"邮箱\"></el-table-column>\r\n      <el-table-column prop=\"mobile\" label=\"电话\"></el-table-column>\r\n      <el-table-column prop=\"role_name\" label=\"角色\"></el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <!-- 状态按钮 -->\r\n        <template slot-scope=\"scope\">\r\n          <el-switch v-model=\"scope.row.mg_state\"\r\n          @change=\"getnewStatus(scope.row)\">\r\n        </el-switch>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 操作区域 -->\r\n      <el-table-column label=\"操作\" width=\"200px\">\r\n        <template slot-scope=\"scope\">\r\n        <!-- 编辑按钮 -->\r\n        <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-edit\" @click=\"editUserInfo(scope.row.id)\"></el-button>\r\n        <!-- 删除按钮 -->\r\n        <el-button type=\"danger\" size=\"mini\" icon=\"el-icon-delete\"></el-button>\r\n        <!-- 文字提示 -->\r\n        <el-tooltip effect=\"dark\" content=\"分配角色\" placement=\"top\" :enterable=\"false\">\r\n          <!-- 分配角色 -->\r\n          <el-button type=\"warning\" size=\"mini\" icon=\"el-icon-setting\"></el-button>\r\n        </el-tooltip>\r\n      </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      :current-page=\"queryInfo.pagenum\"\r\n      :page-sizes=\"[5, 10, 15, 20, 25, 30]\"\r\n      :page-size=\"queryInfo.pagesize\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"total\">\r\n    </el-pagination>\r\n    <!-- 添加用户的对话框 -->\r\n    <el-dialog\r\n      title=\"添加用户\"\r\n      @close=\"closeDialog\"\r\n      :visible.sync=\"dialogVisible\" width=\"60%\">\r\n      <!-- 表单 -->\r\n    <el-form status-icon :model=\"addUserForm\" :rules=\"userRules\" ref=\"formRef\" label-width=\"100px\">\r\n      <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"addUserForm.username\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input v-model=\"addUserForm.password\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"addUserForm.email\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"手机号\" prop=\"mobile\">\r\n          <el-input v-model=\"addUserForm.mobile\"></el-input>\r\n      </el-form-item>\r\n  </el-form>\r\n      <!-- 取消和确认按钮 -->\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n    <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n    <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\r\n  </span>\r\n</el-dialog>\r\n<!-- 编辑用户信息对话框 -->\r\n<el-dialog\r\n        title=\"修改用户\"\r\n        :visible.sync=\"editDialogVisible\" width=\"30%\"\r\n        @close=\"closeEditDialog\">\r\n        <!-- 表单 -->\r\n      <el-form status-icon ref=\"editFormRef\" :rules=\"editFormRules\" :model=\"editForm\" label-width=\"80px\">\r\n        <el-form-item prop=\"username\" label=\"姓名\">\r\n            <el-input v-model=\"editForm.username\" :disabled=\"true\"></el-input>\r\n       </el-form-item>\r\n       <el-form-item prop=\"email\" label=\"邮箱\">\r\n            <el-input v-model=\"editForm.email\"></el-input>\r\n       </el-form-item>\r\n       <el-form-item prop=\"mobile\"  label=\"电话\">\r\n            <el-input v-model=\"editForm.mobile\"></el-input>\r\n       </el-form-item>\r\n      </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"editComplate\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name:'Users',\r\n  data() {\r\n     // 自定义校验规则\r\n    var checkEmail = (rule, value, cb)=>{\r\n        // 验证邮箱\r\n        var regemail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\r\n        if(regemail.test(value)){\r\n         return cb();\r\n        }  \r\n        cb(new Error('格式有误'));  \r\n      };\r\n    var checkMobile = (rule, value, cb) =>{\r\n      // 验证手机号\r\n      const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\r\n      if(regMobile.test(value)){\r\n        return cb();\r\n      };\r\n      cb(new Error('格式有误')); \r\n    };\r\n    return {\r\n      total:0,  // 总人数\r\n      dialogVisible:false, //添加用户对话框是否显示\r\n      editDialogVisible:false, //修改用户对话框是否显示\r\n      queryInfo:{   //获取用户列表的请求参数\r\n        query:'',\r\n        pagenum:1,\r\n        pagesize:5\r\n      },\r\n      userList: [], // 用户列表\r\n      addUserForm:{ //需要添加的用户字段\r\n        username:'',\r\n        password:'',\r\n        email:'',\r\n        mobile:'',\r\n      },\r\n      editForm:{//编辑用户\r\n        id:'',\r\n        email:'',\r\n        mobile:'',\r\n      },  \r\n      userRules:{ //添加表单的验证规则\r\n        username:[\r\n        { required: true, message: '请输入用户名', trigger: 'blur' },\r\n        { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }\r\n        ],\r\n        password:[\r\n        { required: true, message: '请输入密码', trigger: 'blur' },\r\n        { min: 5, max: 15, message: '长度在 5 到 15 个字符', trigger: 'blur' }\r\n        ],\r\n        email:[\r\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\r\n        { validator: checkEmail, trigger: 'blur' }\r\n        ],\r\n        mobile:[\r\n        { required: true, message: '请输入手机号', trigger: 'blur' },\r\n        {validator:checkMobile,trigger:'blur'}\r\n        ],\r\n      },\r\n      editFormRules:{ //编辑用户表单验证规则\r\n        email:[\r\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\r\n        { validator: checkEmail, trigger: 'blur' }\r\n        ],\r\n        mobile:[\r\n        { required: true, message: '请输入手机号', trigger: 'blur' },\r\n        {validator:checkMobile,trigger:'blur'}\r\n        ],\r\n      }  \r\n    };\r\n  },\r\n  created() {\r\n    this.getUserList();\r\n  },\r\n  methods: {\r\n   async getUserList() {\r\n      // 请求用户列表\r\n    const {data:res} =  await this.$http.get('users',{params:this.queryInfo});\r\n    this.total = res.data.total;\r\n    this.userList = res.data.users;\r\n    // console.log(res);\r\n    },\r\n    // 监听 pagesize 的变化\r\n  handleSizeChange(newSize){\r\n    // 将最新的newSize的值赋给pagesize，然后重新发起请求\r\n    this.queryInfo.pagesize = newSize;\r\n    this.getUserList();\r\n  },\r\n  // 监听页数的变化\r\n  handleCurrentChange(newPage){\r\n     // 将最新的newPage的值赋给pagenum，然后重新发起请求\r\n     this.queryInfo.pagenum = newPage;\r\n     this.getUserList();\r\n  },\r\n  // 封装一个每次请求成功后，给出用户相对应的提示信息\r\n  notification(result,fail,success,status){\r\n    if(result.meta.status!==status){\r\n      return this.$message.error(fail);\r\n    }else{\r\n      this.$message.success(success);\r\n    }\r\n  },\r\n  // 监听状态按钮最新的状态\r\n async getnewStatus(userlist){\r\n    // 当用户的状态发生改变时，发起请求用户的状态\r\n    const {data:res} = await this.$http.put(`users/${userlist.id}/state/${userlist.mg_state}`)\r\n      this.notification(res,'用户状态更新失败','用户状态更新成功',200);\r\n    },\r\n    // 当对话框关闭后清空表单的所有数据\r\n    closeDialog(){\r\n      this.$refs.formRef.resetFields();\r\n    },\r\n    // 添加用户\r\n    addUser(){\r\n      this.$refs.formRef.validate(async vail=>{\r\n        if(!vail) return;\r\n        const {data:res} = await this.$http.post('users',this.addUserForm);\r\n        this.notification(res,'用户创建失败','用户创建成功',201);\r\n         // 关闭对话框\r\n         this.dialogVisible = false;\r\n         //更新页面的数据\r\n         this.getUserList(); \r\n      });\r\n    },\r\n    //编辑用户信息\r\n   async editUserInfo(id){\r\n       //显示对话框\r\n      this.editDialogVisible = true;\r\n      // 根据id获取到相对应的用户信息\r\n      const {data:res} =  await this.$http.get('users/'+id);\r\n      this.editForm = res.data;\r\n  },\r\n  // 监听编辑对话框\r\n  closeEditDialog(){\r\n    this.$refs.editFormRef.resetFields();\r\n  },\r\n  // 提交编辑的结果\r\n  editComplate(){\r\n  // 预验证表单\r\n    this.$refs.editFormRef.validate(async vali =>{\r\n      if(!vali)return\r\n      const {data:res} =  await this.$http.put('users/'+this.editForm.id,\r\n      {email:this.editForm.email,mobile:this.editForm.mobile});\r\n\r\n    if(res.meta.status!==200){\r\n        return this.message.error('修改用户信息失败');\r\n     }else{this.$message.success('修改用户信息成功');\r\n    // 关闭对话框\r\n    this.editDialogVisible = false;\r\n    // 更新页面的数据\r\n    this.getUserList();\r\n     }\r\n    });\r\n  },\r\n },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}